generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id                            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                           String     @unique @db.VarChar(50)
  password                           String     @db.VarChar(512)
  salt                               String     @db.VarChar(255)
  email                              String     @unique @db.VarChar(100)
  first_name                         String     @db.VarChar(50)
  last_name                          String     @db.VarChar(50)
  phone_number                       String     @db.VarChar(10)
  photo_url                          String?    @db.VarChar(255)
  salary                             Decimal    @db.Decimal(10, 2)
  priority                           Priority   @default(user)
  adoption_adoption_added_userTouser adoption[] @relation("adoption_added_userTouser")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pet {
  pet_id      Int        @id @default(autoincrement())
  pet_name    String     @db.VarChar(50)
  age_years   Int        @default(0)
  age_months  Int        @default(0)
  species     String     @db.VarChar(80)
  breed       String?    @db.VarChar(80)
  sex         sex?
  photo_url   String?    @db.VarChar(255)
  weight      Float      @db.Real
  adopted     Boolean    @default(false)
  spayed      Boolean    @default(false)
  description String?
  color       String?    @db.VarChar(80)
  adoption    adoption[]
}

model adoption {
  added_id                       Int       @id @default(autoincrement())
  added_user                     String?   @db.Uuid
  pet_id                         Int?
  added_date                     DateTime? @default(now()) @db.Timestamp(6)
  adopted_date                   DateTime? @db.Timestamp(6)
  user_adoption_added_userTouser user?     @relation("adoption_added_userTouser", fields: [added_user], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  pet                            pet?      @relation(fields: [pet_id], references: [pet_id], onDelete: NoAction, onUpdate: NoAction)
}

enum sex {
  Male
  Female
}

enum Priority {
  user
  admin
}
